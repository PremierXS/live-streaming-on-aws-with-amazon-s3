// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LiveStreaming Stack Test 1`] = `
Object {
  "Description": "(SO0109) Live Streaming on AWS with Amazon S3 Solution %%VERSION%%",
  "Mappings": Object {
    "AnonymousData": Object {
      "SendAnonymousData": Object {
        "Data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "LIVE STREAM SOURCE",
          },
          "Parameters": Array [
            "InputType",
          ],
        },
        Object {
          "Label": Object {
            "default": "URL_PULL CONFIGURATION",
          },
          "Parameters": Array [
            "PullUrl",
            "PullUser",
            "PullPass",
          ],
        },
        Object {
          "Label": Object {
            "default": "RTP_PUSH / RTMP_PUSH CONFIGURATION",
          },
          "Parameters": Array [
            "InputCIDR",
          ],
        },
        Object {
          "Label": Object {
            "default": "INPUT_DEVICE CONFIGURATION",
          },
          "Parameters": Array [
            "InputDeviceId",
          ],
        },
        Object {
          "Label": Object {
            "default": "ENCODING OPTIONS",
          },
          "Parameters": Array [
            "EncodingProfile",
            "ChannelStart",
          ],
        },
      ],
      "ParameterLabels": Object {
        "ChannelStart": Object {
          "default": "Start MediaLive Channel",
        },
        "EncodingProfile": Object {
          "default": "Encoding Profile",
        },
        "InputCIDR": Object {
          "default": "Input Security Group CIDR Block (REQUIRED)",
        },
        "InputDeviceId": Object {
          "default": "Elemental Link Input Device ID",
        },
        "InputType": Object {
          "default": "Source Input Type",
        },
        "PullUrl": Object {
          "default": "Source URL (REQUIRED)",
        },
        "PullUser": Object {
          "default": "Source Username (OPTIONAL)",
        },
        "pullPass": Object {
          "default": "Source Password (REQUIRED)",
        },
      },
    },
  },
  "Outputs": Object {
    "BucketMetrics": Object {
      "Description": "Bucket Request Metrics",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-BucketMetrics",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/s3/bucket/",
            Object {
              "Ref": "CloudFrontToS3S3Bucket9CE6AB04",
            },
            "/metrics/bucket_metrics?region=",
            Object {
              "Ref": "AWS::Region",
            },
            "&tab=request&period=1h",
          ],
        ],
      },
    },
    "LiveStreamBucket": Object {
      "Description": "Live Stream Destination Bucket",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-LiveStreamBucket",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/s3/buckets/",
            Object {
              "Ref": "CloudFrontToS3S3Bucket9CE6AB04",
            },
            "?region=",
            Object {
              "Ref": "AWS::Region",
            },
          ],
        ],
      },
    },
    "LiveStreamUrl": Object {
      "Description": "CloudFront Live Stream URL",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-LiveStreamUrl",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CloudFrontToS3CloudFrontDistribution241D9866",
                "DomainName",
              ],
            },
            "/stream/index.m3u8",
          ],
        ],
      },
    },
    "MediaLiveConsole": Object {
      "Description": "MediaLive Channel",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-MediaLiveConsole",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/medialive/home?region=",
            Object {
              "Ref": "AWS::Region",
            },
            "#!/channels",
          ],
        ],
      },
    },
    "MediaLivePushEndpoint": Object {
      "Description": "The MediaLive Input ingress endpoint for push input types",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-MediaLiveEndpoint",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "MediaLiveInput",
          "EndPoint",
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210ArtifactHash3B1AB7E6": Object {
      "Description": "Artifact hash for asset \\"86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210\\"",
      "Type": "String",
    },
    "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210S3Bucket4EEC6A35": Object {
      "Description": "S3 bucket for asset \\"86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210\\"",
      "Type": "String",
    },
    "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210S3VersionKey9A0AA1FE": Object {
      "Description": "S3 key for asset version \\"86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210\\"",
      "Type": "String",
    },
    "ChannelStart": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "If your source is ready to stream select true, this wil start the MediaLive Channel as part of the deployment. If you select false you will need to manually start the MediaLive Channel when your source is ready.",
      "Type": "String",
    },
    "EncodingProfile": Object {
      "AllowedValues": Array [
        "HD-1080p",
        "HD-720p",
        "SD-540p",
      ],
      "Default": "HD-720p",
      "Description": "Select an encoding profile. HD 1080p [1920x1080, 1280x720, 960x540, 768x432, 640x360, 512x288] HD 720p [1280x720, 960x540, 768x432, 640x360, 512x288] SD 540p [960x540, 768x432, 640x360, 512x288]  See the implementation guide for details https://docs.aws.amazon.com/solutions/latest/live-streaming/considerations.html",
      "Type": "String",
    },
    "InputCIDR": Object {
      "Default": "",
      "Description": "For RTP and RTMP PUSH input types ONLY, specify the CIDR Block for the MediaLive SecurityGroup. Input security group restricts access to the input and prevents unauthorized third parties from pushing content into a channel that is associated with that input.",
      "Type": "String",
    },
    "InputDeviceId": Object {
      "Default": "",
      "Description": "Specify the ID for your Elemental Link Input device (please note a Link device can only be attached to one input at a time)",
      "Type": "String",
    },
    "InputType": Object {
      "AllowedValues": Array [
        "RTP_PUSH",
        "RTMP_PUSH",
        "URL_PULL",
        "INPUT_DEVICE",
      ],
      "Default": "URL_PULL",
      "Description": "Specify the input type for MediaLive (default parameters are for the demo video).  For details on setting up each input type, see https://docs.aws.amazon.com/solutions/latest/live-streaming-on-aws-with-amazon-s3/appendix-a.html.",
      "Type": "String",
    },
    "PullPass": Object {
      "Default": "",
      "Description": "For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the password",
      "Type": "String",
    },
    "PullUrl": Object {
      "Default": "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8",
      "Description": "For URL PULL input type ONLY, specify the primary source URL, this should be a HTTP or HTTPS link to the stream manifest file.",
      "Type": "String",
    },
    "PullUser": Object {
      "Default": "",
      "Description": "For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the username",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AnonymousMetric": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ChannelStart": Object {
          "Ref": "ChannelStart",
        },
        "Cidr": Object {
          "Ref": "InputCIDR",
        },
        "EncodingProfile": Object {
          "Ref": "EncodingProfile",
        },
        "SendAnonymousMetric": Object {
          "Fn::FindInMap": Array [
            "AnonymousData",
            "SendAnonymousData",
            "Data",
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomResource8CDCD7A7",
            "Arn",
          ],
        },
        "SolutionId": "SO0109",
        "Type": Object {
          "Ref": "InputType",
        },
        "UUID": Object {
          "Fn::GetAtt": Array [
            "UUID",
            "UUID",
          ],
        },
        "Version": "%%VERSION%%",
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CachePolicy26D8A535": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                "LiveStreamingCachePolicy36FCA70B-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": false,
            "EnableAcceptEncodingGzip": false,
            "HeadersConfig": Object {
              "HeaderBehavior": "whitelist",
              "Headers": Array [
                "Origin",
              ],
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "none",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "CloudFrontToS3CloudFrontDistribution241D9866": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": Object {
        "DistributionConfig": Object {
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 400,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 403,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 404,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 405,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 414,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 416,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 1,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "CachePolicyId": Object {
              "Ref": "CachePolicy26D8A535",
            },
            "Compress": true,
            "TargetOriginId": "LiveStreamingCloudFrontToS3CloudFrontDistributionOrigin1940508AB",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "CloudFrontToS3CloudfrontLoggingBucket8350BE9B",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": Array [
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "CloudFrontToS3S3Bucket9CE6AB04",
                  "RegionalDomainName",
                ],
              },
              "Id": "LiveStreamingCloudFrontToS3CloudFrontDistributionOrigin1940508AB",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "CloudFrontToS3CloudFrontDistributionOrigin1S3OriginB0637B8F",
                      },
                    ],
                  ],
                },
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CloudFrontToS3CloudFrontDistributionOrigin1S3OriginB0637B8F": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for LiveStreamingCloudFrontToS3CloudFrontDistributionOrigin1940508AB",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "CloudFrontToS3CloudfrontLoggingBucket8350BE9B": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for CloudFront Distribution",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontToS3CloudfrontLoggingBucketPolicy416B82D9": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "CloudFrontToS3CloudfrontLoggingBucket8350BE9B",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CloudFrontToS3CloudfrontLoggingBucket8350BE9B",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "CloudFrontToS3CloudfrontLoggingBucket8350BE9B",
                    "Arn",
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontToS3S3Bucket9CE6AB04": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "CloudFrontToS3S3LoggingBucketEF5CD8B2",
          },
        },
        "MetricsConfigurations": Array [
          Object {
            "Id": "EntireBucket",
          },
        ],
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontToS3S3BucketPolicy2495300D": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": Object {
        "Bucket": Object {
          "Ref": "CloudFrontToS3S3Bucket9CE6AB04",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CloudFrontToS3S3Bucket9CE6AB04",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "CloudFrontToS3S3Bucket9CE6AB04",
                    "Arn",
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "CloudFrontToS3CloudFrontDistributionOrigin1S3OriginB0637B8F",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "CloudFrontToS3S3Bucket9CE6AB04",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontToS3S3LoggingBucketEF5CD8B2": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontToS3S3LoggingBucketPolicy360F3875": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "CloudFrontToS3S3LoggingBucketEF5CD8B2",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CloudFrontToS3S3LoggingBucketEF5CD8B2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "CloudFrontToS3S3LoggingBucketEF5CD8B2",
                    "Arn",
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomResource8CDCD7A7": Object {
      "DependsOn": Array [
        "CustomResourceServiceRoleDefaultPolicy62213138",
        "CustomResourceServiceRoleE774390D",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Invalid warning: function has access to cloudwatch",
            },
            Object {
              "id": "W89",
              "reason": "This CustomResource does not need to be deployed inside a VPC",
            },
            Object {
              "id": "W92",
              "reason": "This CustomResource does not need to define ReservedConcurrentExecutions to reserve simultaneous executions",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210S3Bucket4EEC6A35",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210S3VersionKey9A0AA1FE",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters86ec7309c1cbd8d5e15253fa2ffca5ffb39033a4b72e305ccf986040423e8210S3VersionKey9A0AA1FE",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "CFN Custom resource to copy assets to S3 and get the MediaConvert endpoint",
        "Environment": Object {
          "Variables": Object {
            "SOLUTION_IDENTIFIER": "AwsSolution/SO0109/%%VERSION%%",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomResourceServiceRoleE774390D",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomResourceServiceRoleDefaultPolicy62213138": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "medialive:DescribeInputSecurityGroup",
                "medialive:createInputSecurityGroup",
                "medialive:describeInput",
                "medialive:createInput",
                "medialive:deleteInput",
                "medialive:stopChannel",
                "medialive:createChannel",
                "medialive:deleteChannel",
                "medialive:deleteInputSecurityGroup",
                "medialive:describeChannel",
                "medialive:startChannel",
                "medialive:createTags",
                "medialive:deleteTags",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":medialive:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MediaLiveRole1149D189",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomResourceServiceRoleDefaultPolicy62213138",
        "Roles": Array [
          Object {
            "Ref": "CustomResourceServiceRoleE774390D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomResourceServiceRoleE774390D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MediaLiveChannel": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CloudFrontToS3CloudFrontDistributionOrigin1S3OriginB0637B8F",
        "CloudFrontToS3CloudFrontDistribution241D9866",
        "CloudFrontToS3CloudfrontLoggingBucketPolicy416B82D9",
        "CloudFrontToS3CloudfrontLoggingBucket8350BE9B",
        "CloudFrontToS3S3BucketPolicy2495300D",
        "CloudFrontToS3S3Bucket9CE6AB04",
        "CloudFrontToS3S3LoggingBucketPolicy360F3875",
        "CloudFrontToS3S3LoggingBucketEF5CD8B2",
      ],
      "Properties": Object {
        "Codec": "AVC",
        "EncodingProfile": Object {
          "Ref": "EncodingProfile",
        },
        "InputId": Object {
          "Fn::GetAtt": Array [
            "MediaLiveInput",
            "Id",
          ],
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "MediaLiveRole1149D189",
            "Arn",
          ],
        },
        "S3Bucket": Object {
          "Ref": "CloudFrontToS3S3Bucket9CE6AB04",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomResource8CDCD7A7",
            "Arn",
          ],
        },
        "StreamName": Object {
          "Ref": "AWS::StackName",
        },
        "Type": Object {
          "Ref": "InputType",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "MediaLiveChannelStart": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ChannelId": Object {
          "Fn::GetAtt": Array [
            "MediaLiveChannel",
            "ChannelId",
          ],
        },
        "ChannelStart": Object {
          "Ref": "ChannelStart",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomResource8CDCD7A7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "MediaLiveInput": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Cidr": Object {
          "Ref": "InputCIDR",
        },
        "InputDeviceId": Object {
          "Ref": "InputDeviceId",
        },
        "PullPass": Object {
          "Ref": "PullPass",
        },
        "PullUrl": Object {
          "Ref": "PullUrl",
        },
        "PullUser": Object {
          "Ref": "PullUser",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomResource8CDCD7A7",
            "Arn",
          ],
        },
        "StreamName": Object {
          "Ref": "AWS::StackName",
        },
        "Type": Object {
          "Ref": "InputType",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "MediaLiveRole1149D189": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "medialive.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "UUID": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomResource8CDCD7A7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "mediaLivePolicyA0AA0DF7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:ListBucket",
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
              ],
              "Condition": Object {
                "StringEquals": Object {
                  "s3:ResourceAccount": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:s3:::",
                    Object {
                      "Ref": "CloudFrontToS3S3Bucket9CE6AB04",
                    },
                    "/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:PutParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "mediaconnect:ManagedDescribeFlow",
                "mediaconnect:ManagedAddOutput",
                "mediaconnect:ManagedRemoveOutput",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":mediaconnect:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ec2:describeSubnets",
                "ec2:describeNetworkInterfaces",
                "ec2:createNetworkInterface",
                "ec2:createNetworkInterfacePermission",
                "ec2:deleteNetworkInterface",
                "ec2:deleteNetworkInterfacePermission",
                "ec2:describeSecurityGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ec2:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "mediaLivePolicyA0AA0DF7",
        "Roles": Array [
          Object {
            "Ref": "MediaLiveRole1149D189",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
